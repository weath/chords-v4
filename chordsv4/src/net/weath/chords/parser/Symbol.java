/* Symbol.java */
/* Generated By:JavaCC: Do not edit this line. Symbol.java */
package net.weath.chords.parser;

import java.util.ArrayList;

public class Symbol implements SymbolConstants {
  public static Token[] root = new Token[2];
  public static Token type;
  public static ArrayList<Token> tok = new ArrayList<Token>();

  public static void main(String args[]) throws ParseException {
    Symbol parser = new Symbol(System.in);
    while (true) {
      System.out.println("Reading from standard input...");
      System.out.print("Enter a chord symbol: ");
      try {
        switch (Symbol.one_line()) {
        case 0:
          System.out.println("OK.");
          for (Token t : tok) {
                System.out.print( t.toString() );
                System.out.print( " " );
          }
          System.out.println();
          tok.clear();
          break;
        case 1:
          System.out.println("Goodbye.");
          System.exit(0);
          break;
        default:
          break;
        }
      } catch (Exception e) {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        Symbol.ReInit(System.in);
      } catch (Error e) {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        System.exit(0);
        break;
      }
    }
  }

  static final public int one_line() throws ParseException {
    if (jj_2_1(2)) {
      jj_consume_token(0);
{if ("" != null) return 1;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 0:
      case NOTENAME:
      case DIMINISHED:
      case MINOR:
      case PERFECT:
      case MAJOR:
      case AUGMENTED:
      case UNISON:
      case SECOND:
      case THIRD:
      case FOURTH:
      case FIFTH:
      case SIXTH:
      case SEVENTH:
      case OCTAVE:
      case NINTH:
      case TENTH:
      case ELEVENTH:
      case TWELFTH:
      case THIRTEENTH:
      case FOURTEENTH:
      case DBLOCTAVE:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
      case 96:
      case 97:
      case 98:
      case 100:{
        optRoot();
        symOrInterval();
        jj_consume_token(0);
{if ("" != null) return 0;}
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void optRoot() throws ParseException {root = new Token[2];
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOTENAME:{
      root = note();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      ;
    }
  }

  static final public void symOrInterval() throws ParseException {
    if (jj_2_2(2)) {
      interval();
    } else {
      sym();
    }
  }

  static final public void sym() throws ParseException {Token t1 = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MAJOR:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:{
      t1 = type();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    label_1:
    while (true) {
      if (jj_2_3(2)) {
        ;
      } else {
        break label_1;
      }
      pmod();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 42:
    case 100:{
      inv();
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      ;
    }
type = t1;
  }

  static final public void interval() throws ParseException {Token t1, t2;
    t1 = intmod();
    t2 = inttype();
tok.add(t1); tok.add(t2);
  }

  static final public Token intmod() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DIMINISHED:
    case MINOR:
    case PERFECT:
    case MAJOR:
    case AUGMENTED:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DIMINISHED:{
        jj_consume_token(DIMINISHED);
        break;
        }
      case AUGMENTED:{
        jj_consume_token(AUGMENTED);
        break;
        }
      case MINOR:{
        jj_consume_token(MINOR);
        break;
        }
      case MAJOR:{
        jj_consume_token(MAJOR);
        break;
        }
      case PERFECT:{
        jj_consume_token(PERFECT);
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return token;}
      break;
      }
    default:
      jj_la1[5] = jj_gen;
{if ("" != null) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token inttype() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case UNISON:{
      jj_consume_token(UNISON);
      break;
      }
    case SECOND:{
      jj_consume_token(SECOND);
      break;
      }
    case THIRD:{
      jj_consume_token(THIRD);
      break;
      }
    case FOURTH:{
      jj_consume_token(FOURTH);
      break;
      }
    case FIFTH:{
      jj_consume_token(FIFTH);
      break;
      }
    case SIXTH:{
      jj_consume_token(SIXTH);
      break;
      }
    case SEVENTH:{
      jj_consume_token(SEVENTH);
      break;
      }
    case OCTAVE:{
      jj_consume_token(OCTAVE);
      break;
      }
    case NINTH:{
      jj_consume_token(NINTH);
      break;
      }
    case TENTH:{
      jj_consume_token(TENTH);
      break;
      }
    case ELEVENTH:{
      jj_consume_token(ELEVENTH);
      break;
      }
    case TWELFTH:{
      jj_consume_token(TWELFTH);
      break;
      }
    case THIRTEENTH:{
      jj_consume_token(THIRTEENTH);
      break;
      }
    case FOURTEENTH:{
      jj_consume_token(FOURTEENTH);
      break;
      }
    case DBLOCTAVE:{
      jj_consume_token(DBLOCTAVE);
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return token;}
    throw new Error("Missing return statement in function");
  }

  static final public Token[] note() throws ParseException {Token t1, t2=null;
    t1 = jj_consume_token(NOTENAME);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FLAT:
    case SHARP:
    case DBLFLAT:
    case DBLSHARP:{
      t2 = acc();
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
{if ("" != null) return new Token[] {t1,t2};}
    throw new Error("Missing return statement in function");
  }

  static final public Token acc() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FLAT:{
      jj_consume_token(FLAT);
      break;
      }
    case SHARP:{
      jj_consume_token(SHARP);
      break;
      }
    case DBLFLAT:{
      jj_consume_token(DBLFLAT);
      break;
      }
    case DBLSHARP:{
      jj_consume_token(DBLSHARP);
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return token;}
    throw new Error("Missing return statement in function");
  }

  static final public Token type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 30:{
      jj_consume_token(30);
      break;
      }
    case 31:{
      jj_consume_token(31);
      break;
      }
    case 32:{
      jj_consume_token(32);
      break;
      }
    case 33:{
      jj_consume_token(33);
      break;
      }
    case 34:{
      jj_consume_token(34);
      break;
      }
    case 35:{
      jj_consume_token(35);
      break;
      }
    case 36:{
      jj_consume_token(36);
      break;
      }
    case 37:{
      jj_consume_token(37);
      break;
      }
    case MAJOR:{
      jj_consume_token(MAJOR);
      break;
      }
    case 38:{
      jj_consume_token(38);
      break;
      }
    case 39:{
      jj_consume_token(39);
      break;
      }
    case 40:{
      jj_consume_token(40);
      break;
      }
    case 41:{
      jj_consume_token(41);
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return token;}
    throw new Error("Missing return statement in function");
  }

  static final public void pmod() throws ParseException {Token t1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:{
      t1 = mod();
      break;
      }
    case 42:{
      jj_consume_token(42);
      t1 = mod();
      jj_consume_token(43);
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
tok.add(t1);
  }

  static final public Token mod() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 44:{
      jj_consume_token(44);
      break;
      }
    case 45:{
      jj_consume_token(45);
      break;
      }
    case 46:{
      jj_consume_token(46);
      break;
      }
    case 47:{
      jj_consume_token(47);
      break;
      }
    case 48:{
      jj_consume_token(48);
      break;
      }
    case 49:{
      jj_consume_token(49);
      break;
      }
    case 50:{
      jj_consume_token(50);
      break;
      }
    case 51:{
      jj_consume_token(51);
      break;
      }
    case 52:{
      jj_consume_token(52);
      break;
      }
    case 53:{
      jj_consume_token(53);
      break;
      }
    case 54:{
      jj_consume_token(54);
      break;
      }
    case 55:{
      jj_consume_token(55);
      break;
      }
    case 56:{
      jj_consume_token(56);
      break;
      }
    case 57:{
      jj_consume_token(57);
      break;
      }
    case 58:{
      jj_consume_token(58);
      break;
      }
    case 59:{
      jj_consume_token(59);
      break;
      }
    case 60:{
      jj_consume_token(60);
      break;
      }
    case 61:{
      jj_consume_token(61);
      break;
      }
    case 62:{
      jj_consume_token(62);
      break;
      }
    case 63:{
      jj_consume_token(63);
      break;
      }
    case 64:{
      jj_consume_token(64);
      break;
      }
    case 65:{
      jj_consume_token(65);
      break;
      }
    case 66:{
      jj_consume_token(66);
      break;
      }
    case 67:{
      jj_consume_token(67);
      break;
      }
    case 68:{
      jj_consume_token(68);
      break;
      }
    case 69:{
      jj_consume_token(69);
      break;
      }
    case 70:{
      jj_consume_token(70);
      break;
      }
    case 71:{
      jj_consume_token(71);
      break;
      }
    case 72:{
      jj_consume_token(72);
      break;
      }
    case 73:{
      jj_consume_token(73);
      break;
      }
    case 74:{
      jj_consume_token(74);
      break;
      }
    case 75:{
      jj_consume_token(75);
      break;
      }
    case 76:{
      jj_consume_token(76);
      break;
      }
    case 77:{
      jj_consume_token(77);
      break;
      }
    case 78:{
      jj_consume_token(78);
      break;
      }
    case 79:{
      jj_consume_token(79);
      break;
      }
    case 80:{
      jj_consume_token(80);
      break;
      }
    case 81:{
      jj_consume_token(81);
      break;
      }
    case 82:{
      jj_consume_token(82);
      break;
      }
    case 83:{
      jj_consume_token(83);
      break;
      }
    case 84:{
      jj_consume_token(84);
      break;
      }
    case 85:{
      jj_consume_token(85);
      break;
      }
    case 86:{
      jj_consume_token(86);
      break;
      }
    case 87:{
      jj_consume_token(87);
      break;
      }
    case 88:{
      jj_consume_token(88);
      break;
      }
    case 89:{
      jj_consume_token(89);
      break;
      }
    case 90:{
      jj_consume_token(90);
      break;
      }
    case 91:{
      jj_consume_token(91);
      break;
      }
    case 92:{
      jj_consume_token(92);
      break;
      }
    case 93:{
      jj_consume_token(93);
      break;
      }
    case 94:{
      jj_consume_token(94);
      break;
      }
    case 95:{
      jj_consume_token(95);
      break;
      }
    case 96:{
      jj_consume_token(96);
      break;
      }
    case 97:{
      jj_consume_token(97);
      break;
      }
    case 98:{
      jj_consume_token(98);
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return token;}
    throw new Error("Missing return statement in function");
  }

  static final public void inv() throws ParseException {Token t1; Token[] arr;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 42:{
      jj_consume_token(42);
      t1 = ord();
      jj_consume_token(99);
tok.add(t1);
      break;
      }
    case 100:{
      t1 = jj_consume_token(100);
      arr = note();
tok.add(t1); tok.add(arr[0]); tok.add(arr[1]);
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public Token ord() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 101:{
      jj_consume_token(101);
      break;
      }
    case 102:{
      jj_consume_token(102);
      break;
      }
    case 103:{
      jj_consume_token(103);
      break;
      }
    case 104:{
      jj_consume_token(104);
      break;
      }
    case 105:{
      jj_consume_token(105);
      break;
      }
    case 106:{
      jj_consume_token(106);
      break;
      }
    case 107:{
      jj_consume_token(107);
      break;
      }
    case 108:{
      jj_consume_token(108);
      break;
      }
    case 109:{
      jj_consume_token(109);
      break;
      }
    case 110:{
      jj_consume_token(110);
      break;
      }
    case 111:{
      jj_consume_token(111);
      break;
      }
    case 112:{
      jj_consume_token(112);
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return token;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_3R_10()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(59)) {
    jj_scanpos = xsp;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) {
    jj_scanpos = xsp;
    if (jj_scan_token(95)) {
    jj_scanpos = xsp;
    if (jj_scan_token(96)) {
    jj_scanpos = xsp;
    if (jj_scan_token(97)) {
    jj_scanpos = xsp;
    if (jj_scan_token(98)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_3R_3()) return true;
    return false;
  }

  static private boolean jj_3R_5()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_6()
 {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_7()
 {
    if (jj_scan_token(42)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_3()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_6()) {
    jj_scanpos = xsp;
    if (jj_3R_7()) return true;
    }
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_3R_2()) return true;
    return false;
  }

  static private boolean jj_3R_8()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_4()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_8()) {
    jj_scanpos = xsp;
    if (jj_3R_9()) return true;
    }
    return false;
  }

  static private boolean jj_3R_2()
 {
    if (jj_3R_4()) return true;
    if (jj_3R_5()) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_scan_token(0)) return true;
    return false;
  }

  static private boolean jj_3R_9()
 {
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public SymbolTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[14];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xfffffc21,0x20,0xc0002000,0x0,0x7c00,0x7c00,0x3fff8000,0x3c0,0x3c0,0xc0002000,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xfffff7ff,0x0,0x3ff,0x400,0x0,0x0,0x0,0x0,0x0,0x3ff,0xfffff400,0xfffff000,0x400,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0xffffffff,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x17,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x7,0x10,0x1ffe0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[3];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Symbol(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Symbol(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SymbolTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Symbol(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SymbolTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Symbol(SymbolTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SymbolTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[113];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 14; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 113; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 3; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
