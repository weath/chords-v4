/* SymbolTokenManager.java */
 /* Generated By:JavaCC: Do not edit this line. SymbolTokenManager.java */
package net.weath.chords.parser;

import java.util.ArrayList;

/**
 * Token Manager.
 */
@SuppressWarnings("unused")
public class SymbolTokenManager implements SymbolConstants {

    /**
     * Debug output.
     */
    public static java.io.PrintStream debugStream = System.out;

    /**
     * Set debug output.
     */
    public static void setDebugStream(java.io.PrintStream ds) {
        debugStream = ds;
    }

    private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1) {
        switch (pos) {
            default:
                return -1;
        }
    }

    private static final int jjStartNfa_0(int pos, long active0, long active1) {
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
    }

    static private int jjStopAtPos(int pos, int kind) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }

    static private int jjMoveStringLiteralDfa0_0() {
        switch (curChar) {
            case 35:
                jjmatchedKind = 7;
                return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x1004L);
            case 40:
                return jjStopAtPos(0, 42);
            case 41:
                return jjStopAtPos(0, 43);
            case 43:
                jjmatchedKind = 54;
                return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0x2008L);
            case 45:
                jjmatchedKind = 34;
                return jjMoveStringLiteralDfa1_0(0x8210000000000000L, 0x822L);
            case 47:
                jjmatchedKind = 100;
                return jjMoveStringLiteralDfa1_0(0x0L, 0x7e8000000L);
            case 49:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x1c02000004040L);
            case 50:
                jjmatchedKind = 90;
                return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000L);
            case 51:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000L);
            case 52:
                jjmatchedKind = 92;
                return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000000L);
            case 53:
                jjmatchedKind = 30;
                return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000000L);
            case 54:
                jjmatchedKind = 55;
                return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000000L);
            case 55:
                jjmatchedKind = 56;
                return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000000L);
            case 56:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000000L);
            case 57:
                jjmatchedKind = 60;
                return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000000L);
            case 77:
                jjmatchedKind = 35;
                return jjMoveStringLiteralDfa1_0(0x2800000000000000L, 0x10200L);
            case 79:
                return jjStopAtPos(0, 41);
            case 97:
                return jjMoveStringLiteralDfa1_0(0x4000004000L, 0x1e00000L);
            case 98:
                jjmatchedKind = 6;
                return jjMoveStringLiteralDfa1_0(0x4000000000100L, 0x20011L);
            case 100:
                return jjMoveStringLiteralDfa1_0(0x8020000400L, 0x0L);
            case 101:
                return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L);
            case 102:
                return jjMoveStringLiteralDfa1_0(0x100c0000L, 0x0L);
            case 105:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000L);
            case 109:
                jjmatchedKind = 31;
                return jjMoveStringLiteralDfa1_0(0x4400003300002800L, 0x8400L);
            case 110:
                return jjMoveStringLiteralDfa1_0(0x3f00000800000L, 0x180L);
            case 111:
                jjmatchedKind = 40;
                return jjMoveStringLiteralDfa1_0(0x400000L, 0x2000000L);
            case 112:
                return jjMoveStringLiteralDfa1_0(0x1000L, 0x0L);
            case 115:
                return jjMoveStringLiteralDfa1_0(0x310000L, 0x1c0000L);
            case 116:
                return jjMoveStringLiteralDfa1_0(0xd020000L, 0x0L);
            case 117:
                return jjMoveStringLiteralDfa1_0(0x8000L, 0x0L);
            case 120:
                return jjStopAtPos(0, 9);
            default:
                return jjMoveNfa_0(0, 0);
        }
    }

    static private int jjMoveStringLiteralDfa1_0(long active0, long active1) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(0, active0, active1);
            return 1;
        }
        switch (curChar) {
            case 48:
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000000000L);
            case 49:
                if ((active1 & 0x40L) != 0L) {
                    jjmatchedKind = 70;
                    jjmatchedPos = 1;
                }
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800600033230L);
            case 50:
                if ((active1 & 0x8000000L) != 0L) {
                    return jjStopAtPos(1, 91);
                }
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000000000L);
            case 51:
                if ((active1 & 0x4000L) != 0L) {
                    return jjStopAtPos(1, 78);
                }
                break;
            case 52:
                if ((active1 & 0x20000000L) != 0L) {
                    return jjStopAtPos(1, 93);
                }
                break;
            case 53:
                if ((active0 & 0x4000000000000L) != 0L) {
                    return jjStopAtPos(1, 50);
                } else if ((active0 & 0x8000000000000L) != 0L) {
                    return jjStopAtPos(1, 51);
                } else if ((active0 & 0x10000000000000L) != 0L) {
                    return jjStopAtPos(1, 52);
                } else if ((active0 & 0x20000000000000L) != 0L) {
                    return jjStopAtPos(1, 53);
                }
                break;
            case 54:
                if ((active1 & 0x40000000L) != 0L) {
                    return jjStopAtPos(1, 94);
                }
                break;
            case 55:
                if ((active0 & 0x800000000000000L) != 0L) {
                    return jjStopAtPos(1, 59);
                } else if ((active1 & 0x80000000L) != 0L) {
                    return jjStopAtPos(1, 95);
                }
                break;
            case 57:
                if ((active0 & 0x2000000000000000L) != 0L) {
                    return jjStopAtPos(1, 61);
                } else if ((active1 & 0x1L) != 0L) {
                    return jjStopAtPos(1, 64);
                } else if ((active1 & 0x2L) != 0L) {
                    return jjStopAtPos(1, 65);
                } else if ((active1 & 0x4L) != 0L) {
                    return jjStopAtPos(1, 66);
                } else if ((active1 & 0x8L) != 0L) {
                    return jjStopAtPos(1, 67);
                } else if ((active1 & 0x100000000L) != 0L) {
                    return jjStopAtPos(1, 96);
                }
                break;
            case 97:
                if ((active0 & 0x1000000000L) != 0L) {
                    jjmatchedKind = 36;
                    jjmatchedPos = 1;
                }
                return jjMoveStringLiteralDfa2_0(active0, 0x4400002000002000L, active1, 0x8400L);
            case 98:
                if ((active0 & 0x100L) != 0L) {
                    return jjStopAtPos(1, 8);
                }
                break;
            case 99:
                return jjMoveStringLiteralDfa2_0(active0, 0x400000L, active1, 0L);
            case 100:
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1e00000L);
            case 101:
                return jjMoveStringLiteralDfa2_0(active0, 0x1211000L, active1, 0L);
            case 104:
                return jjMoveStringLiteralDfa2_0(active0, 0x8020000L, active1, 0L);
            case 105:
                if ((active0 & 0x100000000L) != 0L) {
                    jjmatchedKind = 32;
                    jjmatchedPos = 1;
                }
                return jjMoveStringLiteralDfa2_0(active0, 0x8200980c00L, active1, 0L);
            case 108:
                return jjMoveStringLiteralDfa2_0(active0, 0x2000000L, active1, 0L);
            case 109:
                return jjMoveStringLiteralDfa2_0(active0, 0x8200000000000000L, active1, 0x800L);
            case 110:
                return jjMoveStringLiteralDfa2_0(active0, 0x8000L, active1, 0x4800000000L);
            case 111:
                return jjMoveStringLiteralDfa2_0(active0, 0x3f00030040000L, active1, 0x180L);
            case 114:
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000000000L);
            case 115:
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000000L);
            case 116:
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x3f0000000000L);
            case 117:
                return jjMoveStringLiteralDfa2_0(active0, 0x4000004000L, active1, 0x1c0000L);
            case 118:
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000L);
            case 119:
                return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0L);
            default:
                break;
        }
        return jjStartNfa_0(0, active0, active1);
    }

    static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L) {
            return jjStartNfa_0(0, old0, old1);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(1, active0, active1);
            return 2;
        }
        switch (curChar) {
            case 32:
                return jjMoveStringLiteralDfa3_0(active0, 0x2900000000000L, active1, 0x100L);
            case 48:
                if ((active1 & 0x10L) != 0L) {
                    return jjStopAtPos(2, 68);
                } else if ((active1 & 0x20L) != 0L) {
                    return jjStopAtPos(2, 69);
                }
                break;
            case 49:
                if ((active1 & 0x200L) != 0L) {
                    return jjStopAtPos(2, 73);
                } else if ((active1 & 0x1000L) != 0L) {
                    return jjStopAtPos(2, 76);
                } else if ((active1 & 0x2000L) != 0L) {
                    return jjStopAtPos(2, 77);
                } else if ((active1 & 0x200000000L) != 0L) {
                    return jjStopAtPos(2, 97);
                }
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80L);
            case 51:
                if ((active0 & 0x400000000000L) != 0L) {
                    return jjStopAtPos(2, 46);
                } else if ((active1 & 0x10000L) != 0L) {
                    return jjStopAtPos(2, 80);
                } else if ((active1 & 0x20000L) != 0L) {
                    return jjStopAtPos(2, 81);
                } else if ((active1 & 0x400000000L) != 0L) {
                    return jjStopAtPos(2, 98);
                }
                break;
            case 53:
                if ((active0 & 0x1000000000000L) != 0L) {
                    return jjStopAtPos(2, 48);
                }
                break;
            case 97:
                return jjMoveStringLiteralDfa3_0(active0, 0x8200000000000000L, active1, 0x800L);
            case 99:
                return jjMoveStringLiteralDfa3_0(active0, 0x10000L, active1, 0L);
            case 100:
                if ((active1 & 0x4000000000L) != 0L) {
                    return jjStopAtPos(2, 102);
                } else if ((active1 & 0x8000000000L) != 0L) {
                    return jjStopAtPos(2, 103);
                }
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1e00000L);
            case 101:
                return jjMoveStringLiteralDfa3_0(active0, 0x6000000L, active1, 0x2000000L);
            case 102:
                return jjMoveStringLiteralDfa3_0(active0, 0x80000L, active1, 0L);
            case 103:
                if ((active0 & 0x4000000000L) != 0L) {
                    jjmatchedKind = 38;
                    jjmatchedPos = 2;
                }
                return jjMoveStringLiteralDfa3_0(active0, 0x4000L, active1, 0L);
            case 104:
                if ((active1 & 0x10000000000L) != 0L) {
                    return jjStopAtPos(2, 104);
                } else if ((active1 & 0x20000000000L) != 0L) {
                    return jjStopAtPos(2, 105);
                } else if ((active1 & 0x40000000000L) != 0L) {
                    return jjStopAtPos(2, 106);
                } else if ((active1 & 0x80000000000L) != 0L) {
                    return jjStopAtPos(2, 107);
                } else if ((active1 & 0x100000000000L) != 0L) {
                    return jjStopAtPos(2, 108);
                } else if ((active1 & 0x200000000000L) != 0L) {
                    return jjStopAtPos(2, 109);
                }
                break;
            case 105:
                return jjMoveStringLiteralDfa3_0(active0, 0x8028000L, active1, 0L);
            case 106:
                if ((active0 & 0x2000000000L) != 0L) {
                    jjmatchedKind = 37;
                    jjmatchedPos = 2;
                }
                return jjMoveStringLiteralDfa3_0(active0, 0x4400000000002000L, active1, 0x8400L);
            case 109:
                if ((active0 & 0x8000000000L) != 0L) {
                    jjmatchedKind = 39;
                    jjmatchedPos = 2;
                }
                return jjMoveStringLiteralDfa3_0(active0, 0x400L, active1, 0L);
            case 110:
                if ((active0 & 0x200000000L) != 0L) {
                    jjmatchedKind = 33;
                    jjmatchedPos = 2;
                }
                return jjMoveStringLiteralDfa3_0(active0, 0x1800800L, active1, 0L);
            case 114:
                return jjMoveStringLiteralDfa3_0(active0, 0x200000001000L, active1, 0L);
            case 115:
                if ((active1 & 0x40000L) != 0L) {
                    jjmatchedKind = 82;
                    jjmatchedPos = 2;
                }
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x180000L);
            case 116:
                if ((active1 & 0x2000000000L) != 0L) {
                    return jjStopAtPos(2, 101);
                }
                return jjMoveStringLiteralDfa3_0(active0, 0x400000L, active1, 0x1c00000000000L);
            case 117:
                return jjMoveStringLiteralDfa3_0(active0, 0x30040000L, active1, 0L);
            case 118:
                return jjMoveStringLiteralDfa3_0(active0, 0x200000L, active1, 0x800000000L);
            case 120:
                return jjMoveStringLiteralDfa3_0(active0, 0x100000L, active1, 0L);
            default:
                break;
        }
        return jjStartNfa_0(1, active0, active1);
    }

    static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L) {
            return jjStartNfa_0(1, old0, old1);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(2, active0, active1);
            return 3;
        }
        switch (curChar) {
            case 49:
                if ((active1 & 0x80L) != 0L) {
                    return jjStopAtPos(3, 71);
                }
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8500L);
            case 50:
                if ((active1 & 0x80000L) != 0L) {
                    return jjStopAtPos(3, 83);
                } else if ((active1 & 0x200000L) != 0L) {
                    return jjStopAtPos(3, 85);
                }
                break;
            case 51:
                if ((active0 & 0x800000000000L) != 0L) {
                    return jjStopAtPos(3, 47);
                }
                break;
            case 52:
                if ((active1 & 0x100000L) != 0L) {
                    return jjStopAtPos(3, 84);
                } else if ((active1 & 0x400000L) != 0L) {
                    return jjStopAtPos(3, 86);
                }
                break;
            case 53:
                if ((active0 & 0x2000000000000L) != 0L) {
                    return jjStopAtPos(3, 49);
                }
                break;
            case 54:
                if ((active1 & 0x800000L) != 0L) {
                    return jjStopAtPos(3, 87);
                }
                break;
            case 55:
                if ((active0 & 0x400000000000000L) != 0L) {
                    return jjStopAtPos(3, 58);
                }
                break;
            case 57:
                if ((active0 & 0x4000000000000000L) != 0L) {
                    return jjStopAtPos(3, 62);
                } else if ((active1 & 0x1000000L) != 0L) {
                    return jjStopAtPos(3, 88);
                }
                break;
            case 97:
                return jjMoveStringLiteralDfa4_0(active0, 0x400000L, active1, 0L);
            case 98:
                return jjMoveStringLiteralDfa4_0(active0, 0x20000000L, active1, 0L);
            case 101:
                return jjMoveStringLiteralDfa4_0(active0, 0x200000L, active1, 0x800000000L);
            case 102:
                return jjMoveStringLiteralDfa4_0(active0, 0x1000L, active1, 0L);
            case 104:
                if ((active1 & 0x400000000000L) != 0L) {
                    return jjStopAtPos(3, 110);
                } else if ((active1 & 0x800000000000L) != 0L) {
                    return jjStopAtPos(3, 111);
                } else if ((active1 & 0x1000000000000L) != 0L) {
                    return jjStopAtPos(3, 112);
                }
                break;
            case 105:
                return jjMoveStringLiteralDfa4_0(active0, 0x400L, active1, 0L);
            case 106:
                return jjMoveStringLiteralDfa4_0(active0, 0x8200000000000000L, active1, 0x800L);
            case 108:
                return jjMoveStringLiteralDfa4_0(active0, 0x4000000L, active1, 0L);
            case 109:
                return jjMoveStringLiteralDfa4_0(active0, 0x4000L, active1, 0L);
            case 111:
                return jjMoveStringLiteralDfa4_0(active0, 0x200000012800L, active1, 0L);
            case 114:
                if ((active1 & 0x2000000L) != 0L) {
                    return jjStopAtPos(3, 89);
                }
                return jjMoveStringLiteralDfa4_0(active0, 0x100018060000L, active1, 0L);
            case 115:
                return jjMoveStringLiteralDfa4_0(active0, 0x8000L, active1, 0L);
            case 116:
                return jjMoveStringLiteralDfa4_0(active0, 0x1980000L, active1, 0L);
            case 118:
                return jjMoveStringLiteralDfa4_0(active0, 0x2000000L, active1, 0L);
            default:
                break;
        }
        return jjStartNfa_0(2, active0, active1);
    }

    static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L) {
            return jjStartNfa_0(2, old0, old1);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(3, active0, active1);
            return 4;
        }
        switch (curChar) {
            case 49:
                if ((active1 & 0x100L) != 0L) {
                    return jjStopAtPos(4, 72);
                } else if ((active1 & 0x400L) != 0L) {
                    return jjStopAtPos(4, 74);
                }
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800L);
            case 51:
                if ((active1 & 0x8000L) != 0L) {
                    return jjStopAtPos(4, 79);
                }
                break;
            case 55:
                if ((active0 & 0x200000000000000L) != 0L) {
                    return jjStopAtPos(4, 57);
                }
                break;
            case 57:
                if ((active0 & 0x8000000000000000L) != 0L) {
                    return jjStopAtPos(4, 63);
                }
                break;
            case 100:
                if ((active0 & 0x20000L) != 0L) {
                    return jjStopAtPos(4, 17);
                }
                break;
            case 101:
                return jjMoveStringLiteralDfa5_0(active0, 0x2005000L, active1, 0L);
            case 102:
                return jjMoveStringLiteralDfa5_0(active0, 0x4000000L, active1, 0L);
            case 104:
                if ((active0 & 0x80000L) != 0L) {
                    return jjStopAtPos(4, 19);
                } else if ((active0 & 0x100000L) != 0L) {
                    return jjStopAtPos(4, 20);
                } else if ((active0 & 0x800000L) != 0L) {
                    return jjStopAtPos(4, 23);
                } else if ((active0 & 0x1000000L) != 0L) {
                    return jjStopAtPos(4, 24);
                }
                break;
            case 108:
                return jjMoveStringLiteralDfa5_0(active0, 0x20000000L, active1, 0L);
            case 110:
                return jjMoveStringLiteralDfa5_0(active0, 0x210400L, active1, 0L);
            case 111:
                return jjMoveStringLiteralDfa5_0(active0, 0x300000008000L, active1, 0L);
            case 114:
                if ((active0 & 0x800L) != 0L) {
                    return jjStopAtPos(4, 11);
                } else if ((active0 & 0x2000L) != 0L) {
                    return jjStopAtPos(4, 13);
                }
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800000000L);
            case 116:
                return jjMoveStringLiteralDfa5_0(active0, 0x18040000L, active1, 0L);
            case 118:
                return jjMoveStringLiteralDfa5_0(active0, 0x400000L, active1, 0L);
            default:
                break;
        }
        return jjStartNfa_0(3, active0, active1);
    }

    static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L) {
            return jjStartNfa_0(3, old0, old1);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(4, active0, active1);
            return 5;
        }
        switch (curChar) {
            case 49:
                if ((active1 & 0x800L) != 0L) {
                    return jjStopAtPos(5, 75);
                }
                break;
            case 99:
                return jjMoveStringLiteralDfa6_0(active0, 0x1000L, active1, 0L);
            case 100:
                if ((active0 & 0x10000L) != 0L) {
                    return jjStopAtPos(5, 16);
                }
                break;
            case 101:
                if ((active0 & 0x400000L) != 0L) {
                    return jjStopAtPos(5, 22);
                }
                return jjMoveStringLiteralDfa6_0(active0, 0x38000000L, active1, 0L);
            case 104:
                if ((active0 & 0x40000L) != 0L) {
                    return jjStopAtPos(5, 18);
                }
                break;
            case 105:
                return jjMoveStringLiteralDfa6_0(active0, 0x400L, active1, 0L);
            case 110:
                if ((active0 & 0x8000L) != 0L) {
                    return jjStopAtPos(5, 15);
                }
                return jjMoveStringLiteralDfa6_0(active0, 0x2004000L, active1, 0L);
            case 111:
                return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L, active1, 0L);
            case 115:
                return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800000000L);
            case 116:
                if ((active0 & 0x200000000000L) != 0L) {
                    return jjStopAtPos(5, 45);
                }
                return jjMoveStringLiteralDfa6_0(active0, 0x4200000L, active1, 0L);
            default:
                break;
        }
        return jjStartNfa_0(4, active0, active1);
    }

    static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L) {
            return jjStartNfa_0(4, old0, old1);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(5, active0, active1);
            return 6;
        }
        switch (curChar) {
            case 32:
                return jjMoveStringLiteralDfa7_0(active0, 0x20000000L, active1, 0L);
            case 101:
                return jjMoveStringLiteralDfa7_0(active0, 0x18000000L, active1, 0L);
            case 104:
                if ((active0 & 0x200000L) != 0L) {
                    return jjStopAtPos(6, 21);
                } else if ((active0 & 0x4000000L) != 0L) {
                    return jjStopAtPos(6, 26);
                }
                break;
            case 105:
                return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800000000L);
            case 115:
                return jjMoveStringLiteralDfa7_0(active0, 0x400L, active1, 0L);
            case 116:
                if ((active0 & 0x1000L) != 0L) {
                    return jjStopAtPos(6, 12);
                } else if ((active0 & 0x100000000000L) != 0L) {
                    return jjStopAtPos(6, 44);
                }
                return jjMoveStringLiteralDfa7_0(active0, 0x2004000L, active1, 0L);
            default:
                break;
        }
        return jjStartNfa_0(5, active0, active1);
    }

    static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L) {
            return jjStartNfa_0(5, old0, old1);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(6, active0, active1);
            return 7;
        }
        switch (curChar) {
            case 101:
                return jjMoveStringLiteralDfa8_0(active0, 0x4000L, active1, 0L);
            case 104:
                if ((active0 & 0x2000000L) != 0L) {
                    return jjStopAtPos(7, 25);
                }
                return jjMoveStringLiteralDfa8_0(active0, 0x400L, active1, 0L);
            case 110:
                return jjMoveStringLiteralDfa8_0(active0, 0x18000000L, active1, 0L);
            case 111:
                return jjMoveStringLiteralDfa8_0(active0, 0x20000000L, active1, 0x800000000L);
            default:
                break;
        }
        return jjStartNfa_0(6, active0, active1);
    }

    static private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L) {
            return jjStartNfa_0(6, old0, old1);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(7, active0, active1);
            return 8;
        }
        switch (curChar) {
            case 99:
                return jjMoveStringLiteralDfa9_0(active0, 0x20000000L, active1, 0L);
            case 100:
                if ((active0 & 0x4000L) != 0L) {
                    return jjStopAtPos(8, 14);
                }
                break;
            case 101:
                return jjMoveStringLiteralDfa9_0(active0, 0x400L, active1, 0L);
            case 110:
                return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800000000L);
            case 116:
                return jjMoveStringLiteralDfa9_0(active0, 0x18000000L, active1, 0L);
            default:
                break;
        }
        return jjStartNfa_0(7, active0, active1);
    }

    static private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L) {
            return jjStartNfa_0(7, old0, old1);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(8, active0, active1);
            return 9;
        }
        switch (curChar) {
            case 41:
                if ((active1 & 0x800000000L) != 0L) {
                    return jjStopAtPos(9, 99);
                }
                break;
            case 100:
                if ((active0 & 0x400L) != 0L) {
                    return jjStopAtPos(9, 10);
                }
                break;
            case 104:
                if ((active0 & 0x8000000L) != 0L) {
                    return jjStopAtPos(9, 27);
                } else if ((active0 & 0x10000000L) != 0L) {
                    return jjStopAtPos(9, 28);
                }
                break;
            case 116:
                return jjMoveStringLiteralDfa10_0(active0, 0x20000000L, active1, 0L);
            default:
                break;
        }
        return jjStartNfa_0(8, active0, active1);
    }

    static private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L) {
            return jjStartNfa_0(8, old0, old1);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(9, active0, 0L);
            return 10;
        }
        switch (curChar) {
            case 97:
                return jjMoveStringLiteralDfa11_0(active0, 0x20000000L);
            default:
                break;
        }
        return jjStartNfa_0(9, active0, 0L);
    }

    static private int jjMoveStringLiteralDfa11_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(9, old0, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(10, active0, 0L);
            return 11;
        }
        switch (curChar) {
            case 118:
                return jjMoveStringLiteralDfa12_0(active0, 0x20000000L);
            default:
                break;
        }
        return jjStartNfa_0(10, active0, 0L);
    }

    static private int jjMoveStringLiteralDfa12_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(10, old0, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(11, active0, 0L);
            return 12;
        }
        switch (curChar) {
            case 101:
                if ((active0 & 0x20000000L) != 0L) {
                    return jjStopAtPos(12, 29);
                }
                break;
            default:
                break;
        }
        return jjStartNfa_0(11, active0, 0L);
    }

    static private int jjMoveNfa_0(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 1;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for (;;) {
            if (++jjround == 0x7fffffff) {
                ReInitRounds();
            }
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0xfeL & l) != 0L) {
                                kind = 5;
                            }
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt))) {
                return curPos;
            }
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }
    static final int[] jjnextStates = {};

    /**
     * Token literal values.
     */
    public static final String[] jjstrLiteralImages = {
        "", null, null, null, null, null, "\142", "\43", "\142\142", "\170",
        "\144\151\155\151\156\151\163\150\145\144", "\155\151\156\157\162", "\160\145\162\146\145\143\164",
        "\155\141\152\157\162", "\141\165\147\155\145\156\164\145\144", "\165\156\151\163\157\156",
        "\163\145\143\157\156\144", "\164\150\151\162\144", "\146\157\165\162\164\150", "\146\151\146\164\150",
        "\163\151\170\164\150", "\163\145\166\145\156\164\150", "\157\143\164\141\166\145",
        "\156\151\156\164\150", "\164\145\156\164\150", "\145\154\145\166\145\156\164\150",
        "\164\167\145\154\146\164\150", "\164\150\151\162\164\145\145\156\164\150",
        "\146\157\165\162\164\145\145\156\164\150", "\144\157\165\142\154\145\40\157\143\164\141\166\145", "\65", "\155",
        "\155\151", "\155\151\156", "\55", "\115", "\155\141", "\155\141\152", "\141\165\147",
        "\144\151\155", "\157", "\117", "\50", "\51", "\156\157\40\162\157\157\164",
        "\156\157\162\157\157\164", "\156\157\63", "\156\157\40\63", "\156\157\65", "\156\157\40\65", "\142\65",
        "\43\65", "\55\65", "\53\65", "\53", "\66", "\67", "\55\155\141\152\67",
        "\155\141\152\67", "\115\67", "\71", "\115\71", "\155\141\152\71", "\55\155\141\152\71",
        "\142\71", "\55\71", "\43\71", "\53\71", "\142\61\60", "\55\61\60", "\61\61",
        "\156\157\61\61", "\156\157\40\61\61", "\115\61\61", "\155\141\152\61\61",
        "\55\155\141\152\61\61", "\43\61\61", "\53\61\61", "\61\63", "\155\141\152\61\63", "\115\61\63",
        "\142\61\63", "\163\165\163", "\163\165\163\62", "\163\165\163\64", "\141\144\144\62",
        "\141\144\144\64", "\141\144\144\66", "\141\144\144\71", "\157\166\145\162", "\62", "\57\62",
        "\64", "\57\64", "\57\66", "\57\67", "\57\71", "\57\61\61", "\57\61\63",
        "\151\156\166\145\162\163\151\157\156\51", "\57", "\61\163\164", "\62\156\144", "\63\162\144", "\64\164\150",
        "\65\164\150", "\66\164\150", "\67\164\150", "\70\164\150", "\71\164\150", "\61\60\164\150",
        "\61\61\164\150", "\61\62\164\150",};

    static protected Token jjFillToken() {
        final Token t;
        final String curTokenImage;
        final int beginLine;
        final int endLine;
        final int beginColumn;
        final int endColumn;
        String im = jjstrLiteralImages[jjmatchedKind];
        curTokenImage = (im == null) ? input_stream.GetImage() : im;
        beginLine = input_stream.getBeginLine();
        beginColumn = input_stream.getBeginColumn();
        endLine = input_stream.getEndLine();
        endColumn = input_stream.getEndColumn();
        t = Token.newToken(jjmatchedKind, curTokenImage);

        t.beginLine = beginLine;
        t.endLine = endLine;
        t.beginColumn = beginColumn;
        t.endColumn = endColumn;

        return t;
    }

    static int curLexState = 0;
    static int defaultLexState = 0;
    static int jjnewStateCnt;
    static int jjround;
    static int jjmatchedPos;
    static int jjmatchedKind;

    /**
     * Get the next Token.
     */
    public static Token getNextToken() {
        Token matchedToken;
        int curPos = 0;

        EOFLoop:
        for (;;) {
            try {
                curChar = input_stream.BeginToken();
            } catch (java.io.IOException e) {
                jjmatchedKind = 0;
                jjmatchedPos = -1;
                matchedToken = jjFillToken();
                return matchedToken;
            }

            try {
                input_stream.backup(0);
                while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L) {
                    curChar = input_stream.BeginToken();
                }
            } catch (java.io.IOException e1) {
                continue EOFLoop;
            }
            jjmatchedKind = 0x7fffffff;
            jjmatchedPos = 0;
            curPos = jjMoveStringLiteralDfa0_0();
            if (jjmatchedKind != 0x7fffffff) {
                if (jjmatchedPos + 1 < curPos) {
                    input_stream.backup(curPos - jjmatchedPos - 1);
                }
                if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                    matchedToken = jjFillToken();
                    return matchedToken;
                } else {
                    continue EOFLoop;
                }
            }
            int error_line = input_stream.getEndLine();
            int error_column = input_stream.getEndColumn();
            String error_after = null;
            boolean EOFSeen = false;
            try {
                input_stream.readChar();
                input_stream.backup(1);
            } catch (java.io.IOException e1) {
                EOFSeen = true;
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
                if (curChar == '\n' || curChar == '\r') {
                    error_line++;
                    error_column = 0;
                } else {
                    error_column++;
                }
            }
            if (!EOFSeen) {
                input_stream.backup(1);
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
            }
            throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
        }
    }

    static private void jjCheckNAdd(int state) {
        if (jjrounds[state] != jjround) {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }

    static private void jjAddStates(int start, int end) {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        } while (start++ != end);
    }

    static private void jjCheckNAddTwoStates(int state1, int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    /**
     * Constructor.
     */
    public SymbolTokenManager(SimpleCharStream stream) {

        if (input_stream != null) {
            throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
        }

        input_stream = stream;
    }

    /**
     * Constructor.
     */
    public SymbolTokenManager(SimpleCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    /**
     * Reinitialise parser.
     */
    static public void ReInit(SimpleCharStream stream) {
        jjmatchedPos = jjnewStateCnt = 0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }

    static private void ReInitRounds() {
        int i;
        jjround = 0x80000001;
        for (i = 1; i-- > 0;) {
            jjrounds[i] = 0x80000000;
        }
    }

    /**
     * Reinitialise parser.
     */
    static public void ReInit(SimpleCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    /**
     * Switch to specified lex state.
     */
    static public void SwitchTo(int lexState) {
        if (lexState >= 1 || lexState < 0) {
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
        } else {
            curLexState = lexState;
        }
    }

    /**
     * Lexer state names.
     */
    public static final String[] lexStateNames = {
        "DEFAULT",};
    static final long[] jjtoToken = {
        0xffffffffffffffe1L, 0x1ffffffffffffL,};
    static final long[] jjtoSkip = {
        0x1eL, 0x0L,};
    static protected SimpleCharStream input_stream;

    static private final int[] jjrounds = new int[1];
    static private final int[] jjstateSet = new int[2 * 1];

    static protected char curChar;
}
