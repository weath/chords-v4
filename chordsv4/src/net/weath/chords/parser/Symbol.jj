/**
 * JavaCC file
 */
 
options {
  JDK_VERSION = "1.5";
//  LOOKAHEAD = 3;
  STATIC = true;
}
PARSER_BEGIN(Symbol)
package net.weath.chords.parser;

import java.util.ArrayList;

public class Symbol {
  public static Token[] root = new Token[2];
  public static Token type;
  public static ArrayList<Token> tok = new ArrayList<Token>();
	
  public static void main(String args[]) throws ParseException {
    Symbol parser = new Symbol(System.in);
    while (true) {
      System.out.println("Reading from standard input...");
      System.out.print("Enter a chord symbol: ");
      try {
        switch (Symbol.one_line()) {
        case 0:
          System.out.println("OK.");
          for (Token t : tok) {
          	System.out.print( t.toString() );
          	System.out.print( " " );
          }
          System.out.println();
          tok.clear();
          break;
        case 1:
          System.out.println("Goodbye.");
          System.exit(0);
          break;
        default:
          break;
        }
      } catch (Exception e) {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        Symbol.ReInit(System.in);
      } catch (Error e) {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        System.exit(0);
        break;
      }
    }
  }
}
PARSER_END(Symbol)

SKIP :
{
 	" "
|	"\r"
|	"\n"
|	"\t"
}
TOKEN :
{
    < NOTENAME: ["A" - "G"] >
|	< FLAT: "b" >
|	< SHARP: "#" >
|	< DBLFLAT: "bb" >
|	< DBLSHARP: "x" >
|	< DIMINISHED: "diminished" >
|	< MINOR: "minor" >
|	< PERFECT: "perfect" >
|	< MAJOR: "major" >
|	< AUGMENTED: "augmented" >
|	< UNISON: "unison" >
|	< SECOND: "second" >
|	< THIRD: "third" >
|	< FOURTH: "fourth" >
|	< FIFTH: "fifth" >
|	< SIXTH: "sixth" >
|	< SEVENTH: "seventh" >
|	< OCTAVE: "octave" >
|	< NINTH: "ninth" >
|	< TENTH: "tenth" >
|	< ELEVENTH: "eleventh" >
|	< TWELFTH: "twelfth" >
|	< THIRTEENTH: "thirteenth" >
|	< FOURTEENTH: "fourteenth" >
|	< DBLOCTAVE: "double octave" >
}
int one_line() : {}
{   LOOKAHEAD(2)
	<EOF>								{ return 1; }
|	optRoot() symOrInterval() <EOF> 	{ return 0; }
}
void optRoot() : { root = new Token[2]; }
{
	( root = note() )?
}
void symOrInterval() : {}
{   LOOKAHEAD(2)
	interval()
|	sym()
}
void sym() : { Token t1 = null;}
{
	( t1=type() )? ( LOOKAHEAD(2) pmod() )* ( inv() )?
		{ type = t1; }
}
void interval() : { Token t1, t2; }
{
	t1 = intmod() t2 = inttype()
		{ tok.add(t1); tok.add(t2); }
}
Token intmod() : {}
{
	(<DIMINISHED> | <AUGMENTED> | <MINOR> | <MAJOR> | <PERFECT>) { return token; }
|	/*empty*/ { return null; }
	
}
Token inttype() : {}
{
	(<UNISON>
|	<SECOND>
|	<THIRD>
|	<FOURTH>
|	<FIFTH>
|	<SIXTH>
|	<SEVENTH>
|	<OCTAVE>
|	<NINTH>
|	<TENTH>
|	<ELEVENTH>
|	<TWELFTH>
|	<THIRTEENTH>
|	<FOURTEENTH>
|	<DBLOCTAVE>
			)   { return token; }
}
Token[] note() : { Token t1, t2=null; }
{
	t1 = <NOTENAME> ( t2=acc() )? { return new Token[] {t1,t2}; }
}
Token acc() : { }
{
	(<FLAT> | <SHARP> | <DBLFLAT> | <DBLSHARP>) { return token; }
}
Token type() : { }
{
	("5"
|	"m"
|	"mi"
|	"min"
|	"-"
|	"M"
|	"ma"
|	"maj"
|	"major"
|	"aug"
|	"dim"
|	"o"
|	"O") { return token; }
}
void pmod() : { Token t1; }
{
	( t1 = mod()
|	"(" t1 = mod() ")" ) { tok.add(t1); }
}
Token mod() : { }
{
	 ("no root"
|        "noroot"
|        "no3"
|        "no 3"
|        "no5"
|        "no 5"
|	 "b5"
|	 "#5"
|	 "-5"
|	 "+5"
|	 "+"
|	 "6"
|	 "7"
|	 "-maj7"
|	 "maj7"
|	 "M7"
|	 "9"
|	 "M9"
|	 "maj9"
|	 "-maj9"
|	 "b9"
|	 "-9"
|	 "#9"
|	 "+9"
|	 "b10"
|	 "-10"
|	 "11"
|        "no11"
|        "no 11"
|	 "M11"
|	 "maj11"
|	 "-maj11"
|	 "#11"
|	 "+11"
|	 "13"
|	 "maj13"
|	 "M13"
|	 "b13"
|	 "sus"
|	 "sus2"
|	 "sus4"
|	 "add2"
|	 "add4"
|	 "add6"
|	 "add9"
|	 "over"
|	 "2"
|	 "/2"
|	 "4"
|	 "/4"
|	 "/6"
|	 "/7"
|	 "/9"
|	 "/11"
|	 "/13") 		{ return token; }
}
void inv() : { Token t1; Token[] arr; }
{
	"(" t1=ord() "inversion)" 	{ tok.add(t1); }
|	t1="/" arr=note() { tok.add(t1); tok.add(arr[0]); tok.add(arr[1]); }
}
Token ord() : {}
{
	("1st"
|	"2nd"
|	"3rd"
|	"4th"
|	"5th"
|	"6th"
|	"7th"
|	"8th"
|	"9th"
|	"10th"
|	"11th"
|	"12th") { return token; }
}
